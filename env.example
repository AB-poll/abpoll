# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.
#
# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=your_project_name
#
# In development avoid writing out bytecode to __pycache__ directories.
#PYTHONDONTWRITEBYTECODE=
export PYTHONDONTWRITEBYTECODE=true
export DEBUG=true
#
# You should generate a random string of 99+ characters for this value in prod.
# You can generate secure secrets by running: ./run flask secrets
export SECRET_KEY=your_production_secret_key
export SERIALIZER_TOKEN=your_serializer_token
#
# Which environment is running? These should be "development" or "production".
#export FLASK_ENV=production
#export NODE_ENV=production
export FLASK_ENV=development
export NODE_ENV=development
#
# In development with Docker Desktop / Linux the default value should work.
# If you have Docker running in a custom VM, put the VM's IP here instead.
#
# In production you'll want to set this to your domain name or whatever you
# plan to access in your browser, such as example.com.
#export SERVER_NAME=localhost:8000
export SERVER_NAME=your_domain.com
#
# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#export PORT=8000
#
# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#export WEB_CONCURRENCY=
export WEB_CONCURRENCY=1
#export PYTHON_MAX_THREADS=1
#
# Do you want code reloading to work with the gunicorn app server?
#export WEB_RELOAD=false
export WEB_RELOAD=true
#
# You'll always want to set POSTGRES_USER and POSTGRES_PASSWORD since the
# postgres Docker image uses them for its default database user and password.
export POSTGRES_USER=your_postgres_user
export POSTGRES_PASSWORD=your_postgres_password
#export POSTGRES_HOST=postgres
#export POSTGRES_PORT=5432
#export POSTGRES_DB=your_postgres_db
#
# Connection string to Redis. This will be used to connect directly to Redis
# and for Celery. You can always split up your Redis servers later if needed.
#export REDIS_URL=redis://redis:6379/0
#
# You can choose between DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL.
# DEBUG tends to get noisy but it could be useful for troubleshooting.
#export CELERY_LOG_LEVEL=info
#
# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no
#
# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true
#
# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8000
#
# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=.:/app
#
# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#export DOCKER_POSTGRES_CPUS=0
#export DOCKER_POSTGRES_MEMORY=0
#export DOCKER_REDIS_CPUS=0
#export DOCKER_REDIS_MEMORY=0
#export DOCKER_WEB_CPUS=0
#export DOCKER_WEB_MEMORY=0
#export DOCKER_WORKER_CPUS=0
#export DOCKER_WORKER_MEMORY=0

# Stripe keys.
export STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key
export STRIPE_SECRET_KEY=your_stripe_secret_key

# S3 Storage IAM.
export CLOUDFLARE_API_KEY=your_cloudflare_api_key
export CLOUDFLARE_ACCOUNT_ID=your_cloudflare_account_id
export CLOUDFLARE_READ_ACCOUNT_ID=your_cloudflare_read_account_id
export CLOUDFLARE_IMAGE_DELETE_URL=https://api.cloudflare.com/client/v4/accounts/:account_id/images/v1/:image_id

# Email Settings.
export MAIL_SERVER=your_mail_server
export MAIL_PORT=587
export MAIL_USE_TLS=true
export MAIL_USERNAME=your_email_username
export MAIL_NAME=your_mail_name
export MAIL_PASSWORD=your_email_password
export MAIL_DEBUG=false
export MAIL_SUPPRESS_SEND=false
export TESTING=false
export EMAIL_SALT=your_email_salt


# Pusher API Keys
export PUSHER_APP_ID=your_pusher_app_id
export PUSHER_KEY=your_pusher_key
export PUSHER_SECRET=your_pusher_secret


# Google Login
export GOOGLE_CLIENT_ID=your_google_client_id
export GOOGLE_CLIENT_SECRET=your_google_client_secret
export GOOGLE_DISCOVERY_URL=https://accounts.google.com/.well-known/openid-configuration

# Facebook Login
export FACEBOOK_APP_ID=your_facebook_app_id
export FACEBOOK_APP_SECRET=your_facebook_app_secret
export FACEBOOK_API_VERSION=v12.0

# GitHub
export GITHUB_SECRET=your_github_secret

# Firebase KEY
export FIREBASE_SERVER_KEY=your_firebase_server_key
export FIREBASE_VAPID_KEY=your_firebase_vapid_key

# OneSignal KEY
export ONESIGNAL_APP_ID=your_onesignal_app_id
export ONESIGNAL_API_KEY=your_onesignal_api_key